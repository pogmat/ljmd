name: MPI CMake Integration and Unit Test

on: [push]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Debug-MPI

jobs:
     
  build_mpi:
  
    runs-on: ubuntu-latest
    
    
    steps:
    - uses: actions/checkout@v2

    #prepare cache for openmpi
    - name: Cache openmpi
      uses: actions/cache@v2
      env:
        cache-name: cache-openmpi
        mpi_ver: 4.1.0
        
      with:
        # openmpi cache files are stored in `~/.openmpi` on Linux/macOS
        path: "~/openmpi/${{ env.mpi_ver }}"
        key:  build-${{ env.cache-name }}-${{ hashFiles('./openmpi-4.1.0.tar.gz') }}

    - name: get openmpi
      if: steps.cache-openmpi.outputs.cache-hit != 'true'
      run: wget https://download.open-mpi.org/release/open-mpi/v4.1/openmpi-4.1.0.tar.gz

      
    - name: untar openmpi
      if: steps.cache-openmpi.outputs.cache-hit != 'true'
      run: tar -xvf ./openmpi-4.1.0.tar.gz
     
    - name: configure openmpi
      if: steps.cache-openmpi.outputs.cache-hit != 'true'
      run: ./openmpi-4.1.0/configure --prefix="/home/${USER}/.openmpi"
      
    - name: install openmpi
      if: steps.cache-openmpi.outputs.cache-hit != 'true'
      run: |
        make -j 2
        sudo make install
        


    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{github.workspace}}/build

    - name: Configure with CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: ${{github.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DENABLE_TESTING=YES -DENABLE_MPI=ON

    - name: Download googletest and Build
      working-directory: ${{github.workspace}}/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build . --config $BUILD_TYPE

    - name: Run Tests
      working-directory: ${{github.workspace}}/build
      shell: bash
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C $BUILD_TYPE 
